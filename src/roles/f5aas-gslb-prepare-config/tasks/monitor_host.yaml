---

- name: "Generating file name for monitor >>> {{monitorType}} >> {{item.host}}"
  set_fact:
    outfile: "files.output/backend-{{GSLB_DOMAIN}}/f5aas-gslb-monitor_{{ROUTES_TYPE}}_{{item.host}}.json"

- name: "Stat file {{outfile}}"
  stat: 
    path: "{{outfile}}"
    get_checksum: no
    get_mime: no
  register: check_outfile

- name: "Stat file {{outfile}}.paths"
  stat:
    path: "{{outfile}}.paths"
    get_mime: no
  register: check_outfile_paths

- name: "Stat file {{outfile}}.included"
  stat:
    path: "{{outfile}}.included"
    get_checksum: no
    get_mime: no
  register: check_outfile_included

- name: build path list, prepare query
  set_fact:
    query_paths: "[?({{ 'host == ' + single_quote + item.host + single_quote}})].{{pathsType}}"

- name: build path list, make query
  set_fact:
    paths: '{{ gslbState | json_query(query_paths) | flatten | unique}}'

- name: "Create file for temptative new paths in {{outfile}}.temptative"
  copy:
    dest: "{{outfile}}.temptative"
    content: "{{paths}}"

- name: "Stat file {{outfile}}.temptative"
  stat:
    path: "{{outfile}}.temptative"
    get_mime: no
  register: check_outfile_temptative

- name: "checksums: "
  debug:
    msg: 
      - "actual: {{check_outfile_paths.stat.checksum}}"
      - "temptative: {{check_outfile_temptative.stat.checksum}}"
  when: VERBOSE == "true" and (check_outfile_paths.stat.exists and check_outfile_temptative.stat.exists)

- name: "Generating file for monitor >>> {{monitorType}} >> {{item.host}}"
  block:
    - name: prepare monitor JSON objects, copy the template file
      delegate_to: localhost
      shell: |
        set -e
        cp "files.input/f5aas-gslb-monitor.tmpl.json" "{{outfile}}"

    - name: "Set initial value for sendString and receiveString for GLSB monitor probes"
      set_fact:
        sendString: ""
        receiveString: "(?s)"
        crLf: '\\\\\\\\r\\\\\\\\n'
        ecrLf: '\\\\\\\\\\\\\\\\r\\\\\\\\\\\\\\\\n'

    - name: Set sendString and receiveString for GSLB monitor probes
      set_fact:
        sendString: "{{ sendString + 'GET ' + path + ' HTTP/1.1' + crLf + 'Host: ' + item.host.split('.')[0] + '.' + BASE_DOMAIN + crLf + 'User-Agent: F5 Cloud Services' + crLf + crLf}}"
        receiveString: "{{ receiveString + 'HTTP/1.. 200 OK' + crLf + '.*' }}"
      with_items: "{{ paths }}"
      loop_control:
        loop_var: path
  
    - name: "Append Connection: close headers to sendString"
      set_fact:
        sendString: "{{ sendString | regex_replace( ecrLf + ecrLf + '$', ecrLf + 'Connection: close' + ecrLf + ecrLf) }}"

    - name: "Show GSLB probing strings for host {{item}}"
      debug:
        msg: 
        - "paths: {{paths}}"
        - "sendString: {{sendString}}"
        - "receiveString: {{receiveString}}"
      when: VERBOSE == "true"

    - name: prepare monitor JSON objects, parametrize the template file
      delegate_to: localhost
      replace:
        path: "{{outfile}}"
        regexp: "{{ inner.expr }}"
        replace: "{{ inner.replace }}"
      with_items:
          - { expr: '%%protocol%%', replace: "{{ROUTES_TYPE}}" }
          - { expr: '%%host%%', replace: "{{item.host.split('.')[0]}}.{{GSLB_DOMAIN}}" }
          - { expr: '%%port%%', replace: "{{ROUTES_TYPE| regex_replace('https', '443') | regex_replace('http', '80') }}" }
          - { expr: '%%hostNormalized%%', replace: "{{ item.host.split('.')[0] | regex_replace('[-.]', '_') }}" }
          - { expr: '%%monitorType%%', replace: "{{monitorType}}" }
          - { expr: '%%sendString%%', replace: "{{sendString}}" }
          - { expr: '%%receiveString%%', replace: "{{receiveString}}" }
      loop_control:
        loop_var: inner

    - name: Store new paths separately
      copy:
        dest: "{{outfile}}.paths"
        content: "{{paths}}"

  when: (check_outfile.stat.exists == false) or (check_outfile_paths.stat.exists and (check_outfile_paths.stat.checksum != check_outfile_temptative.stat.checksum))

- name: conditionally add monitor JSON document
  block:
    - name: add monitor JSON document
      include_tasks: library/json-add-dict-element.yaml
      vars:
        node: "{{outfile}}"
        branch: ".configuration.gslb_service.monitors"
        leaf: ""
        base: "files.output/backend-{{GSLB_DOMAIN}}/f5aas-gslb-update-subscription.tmpl.json"

    - name: mark file as included
      file:
        dest: "{{outfile}}.included"
        state: "touch"
  when: (check_outfile_included.stat.exists == false) or (check_outfile_paths.stat.checksum != check_outfile_temptative.stat.checksum)


