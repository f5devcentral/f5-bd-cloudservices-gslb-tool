---

- name: ">> Generating file name for pool >>> {{item.host}}"
  set_fact:
    pool_outfile: "files.output/backend-{{GSLB_DOMAIN}}/{{item.project}}/bigip-gslb-pool_{{item.host}}.json"

- name: ">> Stat file {{pool_outfile}}"
  stat: 
    path: "{{pool_outfile}}"
    get_checksum: no
    get_mime: no
  register: check_pool_outfile

- name: ">>> set query for pool members for host {{ item.host }}"
  set_fact:
    query_pool_members: "[?(host == '{{item.host}}')].{host: host, ratio: ratio, l7router: l7router, publicAddress: publicAddress }"


- name: ">> Generating file for pool >>> {{item.host}}"
  block:
    - name: ">>> prepare pool JSON objects, copy the template file"
      delegate_to: localhost
      shell: |
        set -e
        cp "files.input/bigip-gslb-pool.tmpl.json" "{{pool_outfile}}"

    - name: ">>> prepare pool JSON objects, parametrize the template file"
      delegate_to: localhost
      replace:
        path: "{{pool_outfile}}"
        regexp: "{{ inner.expr }}"
        replace: "{{ inner.replace }}"
      with_items:
          - { expr: '%%poolGslbRecordNormalized%%', replace: "pool_{{ item.host | regex_replace('[-.]', '_') }}" }
          - { expr: "'", replace: '"' }
          - { expr: '%%ttl%%', replace: "{{item.ttl}}" }
      loop_control:
        loop_var: inner

    - name: ">>> set query for HTTP pool monitors for host {{item.host }}"
      set_fact:
        query_pool_monitors: "[?(host == '{{item.host}}')].httpPaths"

    - name: ">>> get HTTP monitor paths for host {{item.host }}"
      set_fact:
        paths: "{{ gslbState | json_query(query_pool_monitors) | flatten | unique }}"

    - name: ">>> show HTTP monitor paths for host {{item.host }}"
      debug:
        msg: "{{paths}}"

    - name: ">>> setting the monitors for protocol http"
      include_tasks: pool_monitors.yaml
      vars:
        protocol: "http"
      with_items: "{{ paths }}"
      loop_control:
        loop_var: path
    
    - name: ">>> set query for HTTPS pool monitors for host {{item.host }}"
      set_fact:
        query_pool_monitors: "[?(host == '{{item.host}}')].httpsPaths"
    
    - name: ">>> get HTTPS monitor paths for host {{item.host }}"
      set_fact:
        paths: "{{ gslbState | json_query(query_pool_monitors) | flatten | unique }}"
    
    - name: ">>> setting the monitors for protocol https"
      include_tasks: pool_monitors.yaml
      vars:
        protocol: "https"
      with_items: "{{ paths }}"
      loop_control:
        loop_var: path

    - name: ">>> prepare the pool JSON object, create pool members"
      include_tasks: pool_l7router_loop.yaml
      with_items: '{{ gslbState | json_query(query_pool_members) | unique }}'
      loop_control:
        loop_var: inner

  when: check_pool_outfile.stat.exists == false

### Embedding the pool into the main JSON

- name: ">> Stat file {{pool_outfile}}.included"
  stat:
    path: "{{pool_outfile}}.included"
    get_checksum: no
    get_mime: no
  register: check_pool_outfile_included
    
- name: ">> conditionally add pool JSON document"
  block:
    - name: ">>> add pool JSON document"
      include_tasks: library/json-add-dict-element.yaml
      vars:
        node: "{{pool_outfile}}"
        branch: ".{{GSLB_DOMAIN | regex_replace('[-.]', '_')}}.Application"
        leaf: ""
        base: "files.output/backend-{{GSLB_DOMAIN}}/bigip-gslb-update-config.tmpl.json"

    - name: ">>> mark file as included"
      file:
        path: "{{pool_outfile}}.included"
        state: touch
  when: check_pool_outfile_included.stat.exists == false

